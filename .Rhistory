<<<<<<< HEAD
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
#####################################
###### Positions in the genome ######
#####################################
ensembl <- useMart("ensembl", dataset = "hsapiens_snp")
listDatasets()
listDatasets("ensembl")
#####################################
###### Positions in the genome ######
#####################################
ensembl <- useMart("ensembl")
getBM(attributes = c("snp_id", "chromosome_name", "chromosome_start", "chromosome_end"),
filters = "snp_filter",
values = SNP_ID,
mart = ensembl)
listDatasets(ensembl)
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
listDatasets(ensembl)
?useMart
#####################################
###### Positions in the genome ######
#####################################
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
snp_positions <- getBM(attributes = c("snp_id", "chromosome_name", "chromosome_start", "chromosome_end"),
filters = "snp_filter",
values = SNP_ED,
mart = mart)
snp_positions <- getBM(attributes = c("snp_id", "chromosome_name", "chromosome_start", "chromosome_end"),
filters = "snp_filter",
values = SNP_ID,
mart = mart)
listAttributes(mart)
snp_positions <- getBM(attributes = c("chromosome_name", "chromosome_start", "chromosome_end"),
filters = "snp_filter",
values = SNP_ID,
mart = mart)
listFilters(mart)
grep("snp", listFilters(mart))
snp_positions <- getBM(attributes = c("snp_id", "chromosome_name", "chromosome_start", "chromosome_end"),
filters = "snp_filter",
values = SNP_ID,
mart = mart)
listAttributes(mart)
grep("snp", listAttributes(mart))
grep("snp", listAttributes(mart), values = TRUE)
grep("snp", listAttributes(mart))
calculate_ld <- function(snp1, snp2) {
snp1_factor <- factor(snp1)
snp2_factor <- factor(snp2)
contingency_table <- table(snp1_factor, snp2_factor)
chi_square <- chisq.test(contingency_table)$statistic
sqrt(chi_square / length(snp1))
}
ld_matrix <- outer(data_cl[,-1], data_cl[,-1], Vectorize(calculate_ld))
ld_matrix[lower.tri(ld_matrix)] <- NA
rownames(ld_matrix) <- SNP_ID
colnames(ld_matrix) <- SNP_ID
ggplot(data = as.data.frame(as.table(ld_matrix)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "cornflowerblue", high = "darkred", na.value = "transparent", guide = "legend") +
theme_minimal() +
labs(x = "", y = "", title = "LD Plot") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
coord_fixed() +
theme(legend.position = "right")
library(tidyverse)
library(readxl)
library(here)
Chi_sq_table <- ChiSqAll(data_cl)
View(Chi_sq_table)
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(HWTable[[1]] + HWTable[[2]] + HWTable[[3]])
p <- (2*HWTable[[1]] + HWTable[[2]])/HWsum
q <- (2*HWTable[[3]] + HWTable[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
ChiSq <- function(data, significant_only = FALSE, alpha = 0.05){
# Creating and printing contingency table
conTable <- table(data)
# For each diagnosis, we want to test if there is difference in the genotype frequencies
# Empty data frame
pData <- data.frame(matrix(nrow = 0, ncol = 2))
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(HWTable[[1]] + HWTable[[2]] + HWTable[[3]])
p <- (2*HWTable[[1]] + HWTable[[2]])/HWsum
q <- (2*HWTable[[3]] + HWTable[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
# Renaming colums
colnames(pData) <- c("Diagnosis", "p-value")
# Changing p-values to numeric
pData[,2] <- as.numeric(pData[,2])
# Return the output table
if(significant_only == TRUE){
return(na.omit(pData[pData[,2] < alpha,]))
}else{
return(pData)
}
}
ChiSq(SNP)
ChiSq <- function(data, significant_only = FALSE, alpha = 0.05){
# Creating and printing contingency table
conTable <- table(data)
# For each diagnosis, we want to test if there is difference in the genotype frequencies
# Empty data frame
pData <- data.frame(matrix(nrow = 0, ncol = 2))
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(conTable[[1]] + conTable[[2]] + conTable[[3]])
p <- (2*conTable[[1]] + conTable[[2]])/HWsum
q <- (2*conTable[[3]] + conTable[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
# Renaming colums
colnames(pData) <- c("Diagnosis", "p-value")
# Changing p-values to numeric
pData[,2] <- as.numeric(pData[,2])
# Return the output table
if(significant_only == TRUE){
return(na.omit(pData[pData[,2] < alpha,]))
}else{
return(pData)
}
}
ChiSq(SNP)
table(SNP)
library(biomaRt)
snp_mart = useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp", host='may2017.archive.ensembl.org')
snp_mart = useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp")
snp_mart <- useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp")
snp_mart <- useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp")
snp_attributes <- c("refsnp_id", "chr_name", "chrom_start")
snp_locations <- getBM(attributes=snp_attributes, filters="snp_filter",
values=SNP_ID, mart=snp_mart)
snp_locations <- getBM(attributes=snp_attributes, filters="snp_filter",
values=SNP_ID, mart=snp_mart)
View(snp_locations)
# Chisq test for all the SNPs
ChiSqAll <- function(data){
chi_sq <- data.frame(Diagnosis = levels(as.factor(data[,1])))
# Single SNP
for(i in 2:ncol(data)){
ct <- table(data[,1], data[,i])
part_chi <- data.frame(matrix(nrow = 0, ncol = 2))
for(x in 1:nrow(ct)){
# Single diagnosis
t <- ct[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
part_chi <- rbind(part_chi, c(rownames(ct)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
part_chi <- rbind(part_chi, c(rownames(ct)[x], NA))
}
}
colnames(part_chi) <- c("Diagnosis", colnames(data_cl)[i])
chi_sq <- merge(chi_sq, part_chi, by = "Diagnosis")
}
return(chi_sq)
}
Chi_sq_table <- ChiSqAll(data_cl)
View(Chi_sq_table)
ChiSq <- function(data, significant_only = FALSE, alpha = 0.05){
# Creating and printing contingency table
conTable <- table(data)
# For each diagnosis, we want to test if there is difference in the genotype frequencies
# Empty data frame
pData <- data.frame(matrix(nrow = 0, ncol = 2))
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
# Renaming colums
colnames(pData) <- c("Diagnosis", "p-value")
# Changing p-values to numeric
pData[,2] <- as.numeric(pData[,2])
# Return the output table
if(significant_only == TRUE){
return(na.omit(pData[pData[,2] < alpha,]))
}else{
return(pData)
}
}
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
HWE(SNP)
table(SNP)
ChiSq(SNP)
SNPHeatmap(SNP, scaled = TRUE)
Chi_sq_table <- ChiSqAll(data_cl)
View(Chi_sq_table)
ChiSq <- function(data, significant_only = FALSE, alpha = 0.05){
# Creating and printing contingency table
conTable <- table(data)
# For each diagnosis, we want to test if there is difference in the genotype frequencies
# Empty data frame
pData <- data.frame(matrix(nrow = 0, ncol = 2))
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
# Renaming colums
colnames(pData) <- c("Diagnosis", "p-value")
# Changing p-values to numeric
pData[,2] <- as.numeric(pData[,2])
# Return the output table
if(significant_only == TRUE){
return(na.omit(pData[pData[,2] < alpha,]))
}else{
return(pData)
}
}
ChiSq(SNP)
Chi_sq_table <- ChiSqAll(data_cl)
View(Chi_sq_table)
for(i in 2:ncol(data)){
ct <- table(data[,1], data[,i])
part_chi <- data.frame(matrix(nrow = 0, ncol = 2))
for(x in 1:nrow(ct)){
# Single diagnosis
t <- ct[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
part_chi <- rbind(part_chi, c(rownames(ct)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
part_chi <- rbind(part_chi, c(rownames(ct)[x], NA))
}
}
\
# Chisq test for all the SNPs
ChiSqAll <- function(data){
chi_sq <- data.frame(Diagnosis = levels(as.factor(data[,1])))
# Single SNP
for(i in 2:ncol(data)){
ct <- table(data[,1], data[,i])
part_chi <- data.frame(matrix(nrow = 0, ncol = 2))
for(x in 1:nrow(ct)){
# Single diagnosis
t <- ct[x, ]
print(t)
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
part_chi <- rbind(part_chi, c(rownames(ct)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
part_chi <- rbind(part_chi, c(rownames(ct)[x], NA))
}
}
colnames(part_chi) <- c("Diagnosis", colnames(data_cl)[i])
chi_sq <- merge(chi_sq, part_chi, by = "Diagnosis")
}
return(chi_sq)
}
Chi_sq_table <- ChiSqAll(data_cl)
rm(list=ls())
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
ChooseFile <- function(path){
# Reading the excel file
data <- read_xlsx(path)
# Selecting a SNP
a <- menu(colnames(data[,-1]), title="Please, select the SNP of your interest:") + 1
SNP <- cbind(data[, 1], data[, a])
print(paste(colnames(SNP)[2], "selected"))
# Cleaning the SNP table
SNP <- SNP[SNP[,2] %in% c("AA", "GG", "CC","TT", "AT", "AC", "AG", "CT", "CG", "GT", NA), ]
# Factorizing the data
SNP[, 1] <- as.factor(SNP[, 1])
SNP[, 2] <- as.factor(SNP[, 2])
# Return the SNP table
return(SNP)
}
HWE <- function(SNPtable, alpha = 0.05){
# Observed genotype frequencies in the dataset
HWTable <- table(SNPtable[, 2])
# Observed allele frequencies in the dataset
HWsum <- 2*(HWTable[[1]] + HWTable[[2]] + HWTable[[3]])
p <- (2*HWTable[[1]] + HWTable[[2]])/HWsum
q <- (2*HWTable[[3]] + HWTable[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Adding the expected genotype frequencies to the table
HWTable <- rbind(HWTable, HWexp*sum(HWTable))
rownames(HWTable) <- c("Observed", "Expected")
# Printing the table with expected genotype counts
print(HWTable)
# Finally, we can perform the chi squared test
# We use just observed values for the testing. To determine the theoretical allele frequencies,
# we use the 'p' argument of the chisq.test() function.
pvalue <- chisq.test(HWTable[1,], p = HWexp)$p.value
# Output of the function
if(pvalue < alpha){
print(paste0("The population is not at Hardy-Weinberg equilibrium (p-value = ", round(pvalue, 4), ")"))
}else{
print(paste0("The population is at Hardy-Weinberg equilibrium (p-value = ", round(pvalue, 4), ")"))
}
return(pvalue)
}
ChiSq <- function(data, significant_only = FALSE, alpha = 0.05){
# Creating and printing contingency table
conTable <- table(data)
# For each diagnosis, we want to test if there is difference in the genotype frequencies
# Empty data frame
pData <- data.frame(matrix(nrow = 0, ncol = 2))
# Chi-square for each diagnosis
for(x in 1:length(rownames(conTable))){
# Single diagnosis
t <- conTable[x, ]
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
pData <- rbind(pData, c(rownames(conTable)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
pData <- rbind(pData, c(rownames(conTable)[x], NA))
}
}
# Renaming colums
colnames(pData) <- c("Diagnosis", "p-value")
# Changing p-values to numeric
pData[,2] <- as.numeric(pData[,2])
# Return the output table
if(significant_only == TRUE){
return(na.omit(pData[pData[,2] < alpha,]))
}else{
return(pData)
}
}
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
t <- table(data)
t <- t[rowSums(t) > 0,]
# Plot the data
if(scaled == TRUE){
heatmap(t, scale = "row", main = name)
}else if(scaled == FALSE){
heatmap(t, scale = "none")
}
}
# Load the data
SNPdata <- read_xlsx(here("APCgenotypesAnonym.xlsx"))
data_cl <- as.data.frame(lapply(SNPdata[,-1], function(x) ifelse(!x %in% c("AA", "GG", "CC","TT", "AT", "AC", "AG", "CT", "CG", "GT", NA), NA, x)))
data_cl <- cbind(SNPdata[, 1], data_cl)
# Extract rsIDs
SNP_ID <- str_extract(colnames(SNPdata)[-1], "(?<=_|\\b)rs\\d+")
# Chisq test for all the SNPs
ChiSqAll <- function(data){
chi_sq <- data.frame(Diagnosis = levels(as.factor(data[,1])))
# Single SNP
for(i in 2:ncol(data)){
ct <- table(data[,1], data[,i])
part_chi <- data.frame(matrix(nrow = 0, ncol = 2))
for(x in 1:nrow(ct)){
# Single diagnosis
t <- ct[x, ]
print(t)
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
part_chi <- rbind(part_chi, c(rownames(ct)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
part_chi <- rbind(part_chi, c(rownames(ct)[x], NA))
}
}
colnames(part_chi) <- c("Diagnosis", colnames(data_cl)[i])
chi_sq <- merge(chi_sq, part_chi, by = "Diagnosis")
}
return(chi_sq)
}
calculate_ld <- function(snp1, snp2) {
snp1_factor <- factor(snp1)
snp2_factor <- factor(snp2)
contingency_table <- table(snp1_factor, snp2_factor)
chi_square <- chisq.test(contingency_table)$statistic
sqrt(chi_square / length(snp1))
}
ld_matrix <- outer(data_cl[,-1], data_cl[,-1], Vectorize(calculate_ld))
ld_matrix[lower.tri(ld_matrix)] <- NA
rownames(ld_matrix) <- SNP_ID
colnames(ld_matrix) <- SNP_ID
ggplot(data = as.data.frame(as.table(ld_matrix)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "cornflowerblue", high = "darkred", na.value = "transparent", guide = "legend") +
theme_minimal() +
labs(x = "", y = "", title = "LD Plot") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
coord_fixed() +
theme(legend.position = "right")
snp_mart <- useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp")
snp_attributes <- c("refsnp_id", "chr_name", "chrom_start")
snp_locations <- getBM(attributes=snp_attributes, filters="snp_filter",
values=SNP_ID, mart=snp_mart)
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
HWE(SNP)
table(SNP)
ChiSq(SNP)
SNPHeatmap(SNP, scaled = TRUE)
Chi_sq_table <- ChiSqAll(data_cl)
View(SNPdata)
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
HWE(SNP)
table(SNP)
ChiSq(SNP)
SNPHeatmap(SNP, scaled = TRUE)
View(snp_mart)
View(snp_locations)
View(calculate_ld)
yule_theme <- "https://raw.githubusercontent.com/gadenbuie/yule-rstudio/master/Yule-RStudio.rstheme"
rstudioapi::addTheme(yule_theme, apply = TRUE)
oceanic_theme <- "https://raw.githubusercontent.com/gadenbuie/oceanic-eighties/master/oceanic-eighties.rstheme"
rstudioapi::addTheme(oceanic_theme, apply = TRUE)
=======
file.create("Allelyser.R")
file.edit("Allelyser.R")
/\   | | |    | |
#            _ _      _
#      /\   | | |    | |
#     /  \  | | | ___| |_   _ ___  ___ _ __
#    / /\ \ | | |/ _ \ | | | / __|/ _ \ '__|
#   / ____ \| | |  __/ | |_| \__ \  __/ |
#  /_/    \_\_|_|\___|_|\__, |___/\___|_|
#                        __/ |
#                       |___/
#
####################################################
##        ___    ____     __                      ##
##       /   |  / / /__  / /_  __________  _____  ##
##      / /| | / / / _ \/ / / / / ___/ _ \/ ___/  ##
##     / ___ |/ / /  __/ / /_/ (__  )  __/ /      ##
##    /_/  |_/_/_/\___/_/\__, /____/\___/_/       ##
##                      /____/                    ##
####################################################
####################################################
####################################################
##        ___    ____     __                      ##
##       /   |  / / /__  / /_  __________  _____  ##
##      / /| | / / / _ \/ / / / / ___/ _ \/ ___/  ##
##     / ___ |/ / /  __/ / /_/ (__  )  __/ /      ##
##    /_/  |_/_/_/\___/_/\__, /____/\___/_/       ##
##                      /____/                    ##
####################################################
####################################################
####################################################
####################################################
##        ___    ____     __                      ##
##       /   |  / / /__  / /_  __________  _____  ##
##      / /| | / / / _ \/ / / / / ___/ _ \/ ___/  ##
##     / ___ |/ / /  __/ / /_/ (__  )  __/ /      ##
##    /_/  |_/_/_/\___/_/\__, /____/\___/_/       ##
##                      /____/                    ##
####################################################
####################################################
####################################################
##        ___    ____     __                      ##
##       /   |  / / /__  / /_  __________  _____  ##
##      / /| | / / / _ \/ / / / / ___/ _ \/ ___/  ##
##     / ___ |/ / /  __/ / /_/ (__  )  __/ /      ##
##    /_/  |_/_/_/\___/_/\__, /____/\___/_/       ##
##                      /____/                    ##
####################################################
(xlsx)
library(here)
# Packages
library(tidyverse)
library(readxl)
library(here)
>>>>>>> c1c292a818234282fd94220fe70167312920b2cb
