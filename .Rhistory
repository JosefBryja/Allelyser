chi_sq <- data.frame(Diagnosis = levels(as.factor(data[,1])))
# Single SNP
for(i in 2:ncol(data)){
ct <- table(data[,1], data[,i])
part_chi <- data.frame(matrix(nrow = 0, ncol = 2))
for(x in 1:nrow(ct)){
# Single diagnosis
t <- ct[x, ]
print(t)
# Observed allele frequencies in the dataset
HWsum <- 2*(t[[1]] + t[[2]] + t[[3]])
p <- (2*t[[1]] + t[[2]])/HWsum
q <- (2*t[[3]] + t[[2]])/HWsum
# Theoretical probabilities of genotype frequencies
HWexp <- c(p^2, 2*p*q, q^2)
# Chi-square test
if(sum(t) > 0){
part_chi <- rbind(part_chi, c(rownames(ct)[x], round(chisq.test(t, p = HWexp)$p.value, 6)))
}else{
part_chi <- rbind(part_chi, c(rownames(ct)[x], NA))
}
}
colnames(part_chi) <- c("Diagnosis", colnames(data_cl)[i])
chi_sq <- merge(chi_sq, part_chi, by = "Diagnosis")
}
return(chi_sq)
}
#####################
###### LD plot ######
#####################
calculate_ld <- function(snp1, snp2) {
snp1_factor <- factor(snp1)
snp2_factor <- factor(snp2)
contingency_table <- table(snp1_factor, snp2_factor)
chi_square <- chisq.test(contingency_table)$statistic
sqrt(chi_square / length(snp1))
}
ld_matrix <- outer(data_cl[,-1], data_cl[,-1], Vectorize(calculate_ld))
ld_matrix[lower.tri(ld_matrix)] <- NA
rownames(ld_matrix) <- SNP_ID
colnames(ld_matrix) <- SNP_ID
ggplot(data = as.data.frame(as.table(ld_matrix)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "cornflowerblue", high = "darkred", na.value = "transparent", guide = "legend") +
theme_minimal() +
labs(x = "", y = "", title = "LD Plot") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8)) +
coord_fixed() +
theme(legend.position = "right")
###########################
###### SNP positions ######
###########################
snp_mart <- useMart(biomart = "ENSEMBL_MART_SNP", dataset="hsapiens_snp")
snp_attributes <- c("refsnp_id", "chr_name", "chrom_start")
snp_locations <- getBM(attributes = snp_attributes, filters = "snp_filter",
values = SNP_ID, mart = snp_mart)
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
SA_tests(SNP)
test <- SA_counts(SNP)
test
fisher.test(test)
chisq.test(test)
fisher.test(test, workspace = 2e10)
fisher.test(test, workspace = 2e7)
fisher.test(test, workspace = 2e6)
fisher.test(test, workspace = 2e8)
fisher.test(test, workspace = 2)
fisher.test(test, workspace = 2e2)
fisher.test(test)
fisher.test(test, workspace = 2e6)
return(list(
fisher.test(test_data, workspace = 2e7),
chisq.test(test_data)
))
# Tests
SA_tests <- function(data){
test_data <- SA_counts(data)
return(list(
fisher.test(test_data, workspace = 2e7),
chisq.test(test_data)
))
}
SA_tests(SNP)
2e7
2e3
shiny::runApp()
# Test the difference in number of alleles
Chisq_SA <- function(data){
# Extract single alleles
single <- unlist(strsplit(as.character(data[,2]), ""))
# Remove NA values
single <- single[!is.na(single)]
# Contingency table
Allele_table <- table(single)
# Test if there is difference in number of alleles
chisq.test(Allele_table)
}
SA_counts(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts)
return(out)
}
odo
odds_ratio(SNP)
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
odds_ratio <-function(data){
counts <- t(as.matrix(SA_counts(data)))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
out <- oddsratio(counts, workspace = 2e7)
out <- oddsratio(counts)
odds_ratio <-function(data){
counts <- t(as.matrix(SA_counts(data)))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
?oddsration
?oddsratio
out <- oddsratio(counts[1,])
return(out)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts[1,])
return(out)
}
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts[1,])
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
test
install.packages("oddsratio")
library(oddsratio)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio::oddsratio(counts)
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
odds_ratios <- lapply(1:nrow(SNP), function(i) {
contingency_table <- SNP[i, , drop = FALSE]
oddsratio(contingency_table)
})
test
test[1,]
oddsratio(test[1,])
fisher.test(test[1,])
test["AM",]
colSums(counts)
colSums(test)
colSums(test[-"AM",])
colSums(test[-c("AM"),])
test[!(rownames(test) == "AM"),]
test
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row)]))
print(test_table)
}
}
odds_ratio(SNP)
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
print(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
}
}
odds_ratio(SNP)
colSums(counts)
colSums(test)
colSums(test[!(colnames(test) == RC),])
colSums(test[!(colnames(test) == "RC"),])
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
test[!(colnames(test) == "RC"),]
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
oddsratio(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table)))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table)))$measure
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
}
}
odds_ratio(SNP)
file.edit("app.R")
shiny::runApp()
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
adds_ratio(SNP)
odds_ratio(SNP)
fisher.test(test[1,])
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
print(fisher.test(test_table))
}
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
print(fisher.test(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$p.value)
print(fisher.test(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$p.value)
print(fisher.test(test_table)$estimate)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
ftest$measure
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$estimate)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, title = row)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
?mosaicplot
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
test
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
print(test_table)
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
