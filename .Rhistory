# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", SNP, "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_grid(. ~ variable, scales = "free_y", space = "free_y") +  # Clustering rows
# Remove facet labels
theme(strip.text.x = element_blank(),
strip.background = element_blank())
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"))
}
}
mosaicplot(SNP)
mosaicplots(SNP)
?mosaicplot
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 4)
}
}
mosaicplots(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 2)
}
}
mosaicplots(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 1.5)
}
}
mosaicplots(SNP)
shiny::runApp()
shiny::runApp()
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
odds_ratio(SNP)
table(SNP)
# Single polymorphisms
SNP <- ChooseFile(here("APCgenotypesAnonym.xlsx"))
odds_ratio(SNP)
table(SNP)
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
SA_counts(SNP)
table(SNP)
SNP
SNP[!is.na(SNP),]
SNP[!(is.na(SNP)),]
na.omit(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
out <- rbind(out, Allele_table[,2])
}
rownames(out) <- diagnoses
colnames(out) <- names
return(out)
}
# Tests
SA_tests <- function(data){
test_data <- SA_counts(data)
return(list(
fisher.test(test_data, workspace = 2e7),
chisq.test(test_data)
))
}
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
ftest <- fisher.test(test_table)
print(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 1.5)
}
}
odds_ratio(SNP)
SA_counts(SNP)
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
print(subdata)
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
rownames(out) <- diagnoses
colnames(out) <- names
return(out)
}
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
print(subdata)
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
print(single)
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
head(SNP)
table(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
out <- rbind(out, Allele_table[,2])
}
rownames(out) <- diagnoses
colnames(out) <- names
return(out)
}
table(SNP)
SA_counts(SNP)
# Tests
SA_tests <- function(data){
test_data <- SA_counts(data)
return(list(
fisher.test(test_data, workspace = 2e7),
chisq.test(test_data)
))
}
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
print(data[data[,2] == "FV", ])
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- na.omit(data)
print(levels(data))
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
print(levels(data))
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
# Get the allele count for each diagnosis
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
print(levels(as.factor(data)))
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
# Allele_table <- as.data.frame(table(single))
# out <- rbind(out, Allele_table[,2])
}
# rownames(out) <- diagnoses
# colnames(out) <- names
# return(out)
}
SA_counts(SNP)
SNP[!is.na(SNP[,2]),]
head(SNP, 20)
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
diagnoses <- levels(data[,1])
out <- data.frame(matrix(nrow = 0, ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
if(nrow(subdata) == 0) next  # Skip if no observations for this diagnosis
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
out <- rbind(out, Allele_table[,2])
}
rownames(out) <- diagnoses
colnames(out) <- names
return(out)
}
SA_counts(SNP)
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
diagnoses <- levels(data[,1])
# Initialize output dataframe with correct number of rows
out <- data.frame(matrix(nrow = length(diagnoses), ncol = 2))
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
# Counter for tracking current row index in the output dataframe
row_index <- 1
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
if(nrow(subdata) == 0) next  # Skip if no observations for this diagnosis
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
out[row_index,] <- Allele_table[,2]
row_index <- row_index + 1
}
rownames(out) <- diagnoses[1:row_index-1]  # Set row names for diagnoses with observations
colnames(out) <- names
return(out)
}
SA_counts(SNP)
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
diagnoses <- levels(data[,1])
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
# Initialize empty dataframe
out <- data.frame(matrix(nrow = 0, ncol = length(names)))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
if(nrow(subdata) == 0) next  # Skip if no observations for this diagnosis
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
# Append to output dataframe
out <- rbind(out, Allele_table[,2])
}
# Set row names for diagnoses with observations
rownames(out) <- diagnoses[rowSums(table(data[,1])) > 0]
colnames(out) <- names
return(out)
}
SA_counts(SNP)
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
diagnoses <- levels(data[,1])
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
# Initialize empty dataframe
out <- data.frame(matrix(nrow = 0, ncol = length(names)))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
if(nrow(subdata) == 0) next  # Skip if no observations for this diagnosis
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
# Append to output dataframe
out <- rbind(out, Allele_table[,2])
}
# Set row names for diagnoses with observations
rownames(out) <- diagnoses[rowSums(data[,1] == diagnoses) > 0]
colnames(out) <- names
return(out)
}
SA_counts(SNP)
SA_counts <- function(data){
data <- data[!is.na(data[,2]),]
diagnoses <- levels(data[,1])
names <- levels(as.factor(unlist(strsplit(as.character(data[,2]), ""))))
# Initialize empty dataframe
out <- data.frame(matrix(nrow = 0, ncol = length(names)))
for(diag in diagnoses){
subdata <- data[data[,1] == diag,]
if(nrow(subdata) == 0) next  # Skip if no observations for this diagnosis
single <- unlist(strsplit(as.character(subdata[,2]), ""))
single <- single[!is.na(single)]
Allele_table <- as.data.frame(table(single))
# Append to output dataframe
out <- rbind(out, Allele_table[,2])
}
# Set row names for diagnoses with observations
rownames(out) <- diagnoses[sapply(diagnoses, function(x) any(data[,1] == x))]
colnames(out) <- names
return(out)
}
SA_counts(SNP)
odds_ratio(SNP)
file.create("SA_counts.R")
file.edit("SA_counts.R")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
