print(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
odds_ratio(SNP)
table(SNP)
odds_ratio(SNP)
119/216
(119 + 47)/(216 + 119)
(216 + 119)/(119 + 47)
(216 + 119)*(119 + 47)
(216 + 119)*119
(216 + 119)*2016
(216 + 119)*216
72360/39865
(119/47)/(216/144)
(119/216)/(47/144)
file.create("setup.R")
file.edit("setup.R")
# List of required libraries
required_libraries <- c("shiny", "shinythemes", "shinyFiles", "readxl",
"ggplot2", "writexl", "here", "epitools", "gridGraphics")
# Function to check and install missing libraries
check_and_install_libraries <- function(required_libraries) {
missing_libraries <- required_libraries[!(required_libraries %in% installed.packages())]
if (length(missing_libraries) > 0) {
message("Installing missing libraries...")
install.packages(missing_libraries, dependencies = TRUE)
message("Installation complete.")
} else {
message("All required libraries are already installed.")
}
}
# Call the function
check_and_install_libraries(required_libraries)
install.packages(3dheatmap)
remove.packages(epitools)
remove.packages("epitools")
# List of required libraries
required_libraries <- c("shiny", "shinythemes", "shinyFiles", "readxl",
"ggplot2", "writexl", "here", "epitools", "gridGraphics")
# Function to check and install missing libraries
check_and_install_libraries <- function(required_libraries) {
missing_libraries <- required_libraries[!(required_libraries %in% installed.packages())]
if (length(missing_libraries) > 0) {
message("Installing missing libraries...")
install.packages(missing_libraries, dependencies = TRUE)
message("Installation complete.")
} else {
message("All required libraries are already installed.")
}
}
# Call the function
check_and_install_libraries(required_libraries)
install.packages("3dheatmap")
install.packages("d3heatmap")
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
t <- table(data)
t <- t[rowSums(t) > 0,]
# Plot the data
if(scaled == TRUE){
heatmap(t, scale = "row", main = name)
}else if(scaled == FALSE){
heatmap(t, scale = "none")
}
}
SNPHeatmap(SNP, scaled = TRUE)
installed.packages()
remove.packages("shiny")
# List of required libraries
required_libraries <- c("shiny", "shinythemes", "shinyFiles", "readxl",
"ggplot2", "writexl", "here", "epitools", "gridGraphics")
# Function to check and install missing libraries
check_and_install_libraries <- function(required_libraries) {
missing_libraries <- required_libraries[!(required_libraries %in% installed.packages())]
if (length(missing_libraries) > 0) {
message("Installing missing libraries...")
install.packages(missing_libraries, dependencies = TRUE)
message("Installation complete.")
} else {
message("All required libraries are already installed.")
}
}
# Call the function
check_and_install_libraries(required_libraries)
shiny::runApp()
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
print(name)
t <- table(data)
t <- t[rowSums(t) > 0,]
print(t)
# Plot the data
if(scaled == TRUE){
return(heatmap(t, scale = "row", main = name))
}else if(scaled == FALSE){
return(heatmap(t, scale = "none"))
}
}
SNPHeatmap(SNP)
ggplot(t, aes(x = name, y = diagnosis))+
geom_tile()
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
print(name)
t <- table(data)
t <- t[rowSums(t) > 0,]
print(t)
# Plot the data
if(scaled == TRUE){
return(heatmap(t, scale = "row", main = name))
ggplot(data = t, aes(x = name, y = diagnosis))+
geom_tile()
}else if(scaled == FALSE){
return(heatmap(t, scale = "none"))
}
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
print(name)
t <- table(data)
t <- t[rowSums(t) > 0,]
print(t)
# Plot the data
if(scaled == TRUE){
#return(heatmap(t, scale = "row", main = name))
plt <- ggplot(data = t, aes(x = name, y = diagnosis))+
geom_tile()
return(plt)
}else if(scaled == FALSE){
return(heatmap(t, scale = "none"))
}
}
SNPHeatmap(SNP)
SNP
install.packages("shinythemes")
install.packages("shinythemes")
remove.packages("shinythemes")
# List of required libraries
required_libraries <- c("shiny", "shinythemes", "shinyFiles", "readxl",
"ggplot2", "writexl", "here", "epitools", "gridGraphics")
# Function to check and install missing libraries
check_and_install_libraries <- function(required_libraries) {
missing_libraries <- required_libraries[!(required_libraries %in% installed.packages())]
if (length(missing_libraries) > 0) {
message("Installing missing libraries...")
install.packages(missing_libraries, dependencies = TRUE)
message("Installation complete.")
} else {
message("All required libraries are already installed.")
}
}
# Call the function
check_and_install_libraries(required_libraries)
heatmap(SNP)
heatmap(as.matrix(SNP))
heatmap(table(SNP))
SNPHeatmap <- function(data, scaled = TRUE){
# Create data for visualization
name <- colnames(data)[2]
t <- table(data)
t <- t[rowSums(t) > 0,]
# Plot the data
if(scaled == TRUE){
heatmap(t, scale = "row", main = name, cellnote = t)
}else if(scaled == FALSE){
heatmap(t, scale = "none")
}
}
heatmap(table(SNP))
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 3, color = "black") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
SNPHeatmap(SNP)
table(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 3, color = "black") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_void() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
table(SNP)
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 3, color = "black") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_bw() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black", face = "bold") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "green") +
geom_text(size = 5, color = "black", face = "bold") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "black") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "white", high = "blue") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "GLI1..rs2228226", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = GLI1..rs2228226, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = "GLI1..rs2228226", y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", name, "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = name, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", SNP, "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
facet_grid(. ~ variable, scales = "free_y", space = "free_y") +  # Clustering rows
# Remove facet labels
theme(strip.text.x = element_blank(),
strip.background = element_blank())
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
SNPHeatmap <- function(data){
name <- colnames(data)[2]
# Create a table of counts
count_table <- table(data)
# Convert table to a data frame
df <- as.data.frame(as.table(count_table))
names(df) <- c("diagnosis", "SNP", "count")
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(df, aes(x = SNP, y = diagnosis, fill = count, label = count)) +
geom_tile(color = "white") +
geom_text(size = 5, color = "black") +  # Add text labels
scale_fill_gradient(low = "cornflowerblue", high = "darkred") +  # Color gradient
labs(title = "SNP Heatmap", x = name, y = "diagnosis") +  # Axis labels and title
theme_minimal() +  # Minimal theme
# Rotate x-axis labels for better readability
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Print the plot
print(heatmap_plot)
}
SNPHeatmap(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"))
}
}
mosaicplot(SNP)
mosaicplots(SNP)
?mosaicplot
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 4)
}
}
mosaicplots(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 2)
}
}
mosaicplots(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("cornflowerblue", "darkred"), cex.axis = 1.5)
}
}
mosaicplots(SNP)
shiny::runApp()
