library(epitools)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts[1,])
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
test
install.packages("oddsratio")
library(oddsratio)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio::oddsratio(counts)
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
out <- oddsratio(counts)
return(out)
}
odds_ratio(SNP)
odds_ratios <- lapply(1:nrow(SNP), function(i) {
contingency_table <- SNP[i, , drop = FALSE]
oddsratio(contingency_table)
})
test
test[1,]
oddsratio(test[1,])
fisher.test(test[1,])
test["AM",]
colSums(counts)
colSums(test)
colSums(test[-"AM",])
colSums(test[-c("AM"),])
test[!(rownames(test) == "AM"),]
test
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row)]))
print(test_table)
}
}
odds_ratio(SNP)
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
print(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
}
}
odds_ratio(SNP)
colSums(counts)
colSums(test)
colSums(test[!(colnames(test) == RC),])
colSums(test[!(colnames(test) == "RC"),])
test_table <- rbind(test_table, colSums(counts[!(colnames(counts) == row),]))
test[!(colnames(test) == "RC"),]
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
oddsratio(test_table)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table)))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table)))$measure
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
}
}
odds_ratio(SNP)
file.edit("app.R")
shiny::runApp()
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
adds_ratio(SNP)
odds_ratio(SNP)
fisher.test(test[1,])
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
print(fisher.test(test_table))
}
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$measure)
print(fisher.test(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$p.value)
print(fisher.test(test_table))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(oddsratio(t(test_table))$p.value)
print(fisher.test(test_table)$estimate)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
ftest$measure
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest)
print(ftest$measure)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$estimate)
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, title = row)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
?mosaicplot
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(ftest$estimate[[1]])
}
}
odds_ratio(SNP)
test
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
mosaicplot(test_table, main = row)
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Healthy")
print(test_table)
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
print(test_table)
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
print(paste(row, ": ", ftest$estimate[[1]]))
}
}
odds_ratio(SNP)
library(biomaRt)
# Test the difference in number of alleles
Chisq_SA <- function(data){
# Extract single alleles
single <- unlist(strsplit(as.character(data[,2]), ""))
# Remove NA values
single <- single[!is.na(single)]
# Contingency table
Allele_table <- table(single)
# Test if there is difference in number of alleles
chisq.test(Allele_table)
}
library(tidyverse)
library(readxl)
library(here)
library(biomaRt)
library(epitools)
library(oddsratio)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
ftest <- fisher.test(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
odds_ratio(SNP)
mosaicplots <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
mosaicplot(test_table, main = row, color = c("darkred", "gold"))
}
}
mosaicplots(SNP)
dev.off()
mosaicplots(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
ftest <- fisher.test(t(test_table))
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
ftest <- fisher.test(test_table)
print(ftest)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
odds_ratio(SNP)
odds_ratio <-function(data){
counts <- as.matrix(SA_counts(data))
rows <- rownames(counts)
out <- as.data.frame(matrix(nrow = 0, ncol = 4))
for(row in rows){
test_table <- counts[row,]
test_table <- rbind(test_table, colSums(counts[!(rownames(counts) == row),]))
rownames(test_table) <- c(row, "Others")
ftest <- fisher.test(test_table)
print(test_table)
out <- rbind(out, c(ftest$estimate[[1]], ftest$conf.int[1], ftest$conf.int[2], ftest$p.value))
}
colnames(out) <- c("Odds Ratio", "Lower", "Upper", "p-value")
rownames(out) <- rows
return(out)
}
odds_ratio(SNP)
table(SNP)
odds_ratio(SNP)
119/216
(119 + 47)/(216 + 119)
(216 + 119)/(119 + 47)
(216 + 119)*(119 + 47)
(216 + 119)*119
(216 + 119)*2016
(216 + 119)*216
72360/39865
(119/47)/(216/144)
(119/216)/(47/144)
